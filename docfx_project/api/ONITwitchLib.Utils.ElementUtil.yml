### YamlMime:ManagedReference
items:
- uid: ONITwitchLib.Utils.ElementUtil
  commentId: T:ONITwitchLib.Utils.ElementUtil
  id: ElementUtil
  parent: ONITwitchLib.Utils
  children:
  - ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(Element)
  - ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(SimHashes)
  - ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(System.String)
  - ONITwitchLib.Utils.ElementUtil.FindElementByNameFast(System.String)
  langs:
  - csharp
  - vb
  name: ElementUtil
  nameWithType: ElementUtil
  fullName: ONITwitchLib.Utils.ElementUtil
  type: Class
  source:
    remote:
      path: ONITwitchLib/Utils/ElementUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: ElementUtil
    path: ../ONITwitchLib/Utils/ElementUtil.cs
    startLine: 7
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Utilities for finding and working with elements.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static class ElementUtil
    content.vb: >-
      <PublicAPI>

      Public Module ElementUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.ElementUtil.FindElementByNameFast(System.String)
  commentId: M:ONITwitchLib.Utils.ElementUtil.FindElementByNameFast(System.String)
  id: FindElementByNameFast(System.String)
  parent: ONITwitchLib.Utils.ElementUtil
  langs:
  - csharp
  - vb
  name: FindElementByNameFast(string)
  nameWithType: ElementUtil.FindElementByNameFast(string)
  fullName: ONITwitchLib.Utils.ElementUtil.FindElementByNameFast(string)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/ElementUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: FindElementByNameFast
    path: ../ONITwitchLib/Utils/ElementUtil.cs
    startLine: 15
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Finds an element by its string ID without going through Enum.Parse.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [CanBeNull]

      public static Element FindElementByNameFast(string name)
    parameters:
    - id: name
      type: System.String
      description: The ID of the element to find
    return:
      type: Element
      description: The <xref href="Element" data-throw-if-not-resolved="false"></xref> if it exists, or <code>null</code> otherwise.
    content.vb: >-
      <PublicAPI>

      <CanBeNull>

      Public Shared Function FindElementByNameFast(name As String) As Element
  overload: ONITwitchLib.Utils.ElementUtil.FindElementByNameFast*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.CanBeNullAttribute
    ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
    arguments: []
  nameWithType.vb: ElementUtil.FindElementByNameFast(String)
  fullName.vb: ONITwitchLib.Utils.ElementUtil.FindElementByNameFast(String)
  name.vb: FindElementByNameFast(String)
- uid: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(System.String)
  commentId: M:ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(System.String)
  id: ElementExistsAndEnabled(System.String)
  parent: ONITwitchLib.Utils.ElementUtil
  langs:
  - csharp
  - vb
  name: ElementExistsAndEnabled(string)
  nameWithType: ElementUtil.ElementExistsAndEnabled(string)
  fullName: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(string)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/ElementUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: ElementExistsAndEnabled
    path: ../ONITwitchLib/Utils/ElementUtil.cs
    startLine: 28
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Determines whether an element exists and is enabled for the current DLC, if applicable.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static bool ElementExistsAndEnabled(string name)
    parameters:
    - id: name
      type: System.String
      description: The ID of the element to find
    return:
      type: System.Boolean
      description: <code>true</code> if this element does exist and is currently enabled, <code>false</code> otherwise.
    content.vb: >-
      <PublicAPI>

      Public Shared Function ElementExistsAndEnabled(name As String) As Boolean
  overload: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: ElementUtil.ElementExistsAndEnabled(String)
  fullName.vb: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(String)
  name.vb: ElementExistsAndEnabled(String)
- uid: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(SimHashes)
  commentId: M:ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(SimHashes)
  id: ElementExistsAndEnabled(SimHashes)
  parent: ONITwitchLib.Utils.ElementUtil
  langs:
  - csharp
  - vb
  name: ElementExistsAndEnabled(SimHashes)
  nameWithType: ElementUtil.ElementExistsAndEnabled(SimHashes)
  fullName: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(SimHashes)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/ElementUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: ElementExistsAndEnabled
    path: ../ONITwitchLib/Utils/ElementUtil.cs
    startLine: 40
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Determines whether an element exists and is enabled for the current DLC, if applicable.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static bool ElementExistsAndEnabled(SimHashes hash)
    parameters:
    - id: hash
      type: SimHashes
      description: The ID of the element to find
    return:
      type: System.Boolean
      description: <code>true</code> if this element does exist and is currently enabled, <code>false</code> otherwise.
    content.vb: >-
      <PublicAPI>

      Public Shared Function ElementExistsAndEnabled(hash As SimHashes) As Boolean
  overload: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(Element)
  commentId: M:ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(Element)
  id: ElementExistsAndEnabled(Element)
  parent: ONITwitchLib.Utils.ElementUtil
  langs:
  - csharp
  - vb
  name: ElementExistsAndEnabled(Element)
  nameWithType: ElementUtil.ElementExistsAndEnabled(Element)
  fullName: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(Element)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/ElementUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: ElementExistsAndEnabled
    path: ../ONITwitchLib/Utils/ElementUtil.cs
    startLine: 52
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Determines whether an element exists and is enabled for the current DLC, if applicable.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [ContractAnnotation("element:null => false")]

      public static bool ElementExistsAndEnabled(Element element)
    parameters:
    - id: element
      type: Element
      description: The element to find
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    return:
      type: System.Boolean
      description: <code>true</code> if this element does exist and is currently enabled, <code>false</code> otherwise.
    content.vb: >-
      <PublicAPI>

      <ContractAnnotation("element:null => false")>

      Public Shared Function ElementExistsAndEnabled(element As Element) As Boolean
  overload: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.ContractAnnotationAttribute
    ctor: JetBrains.Annotations.ContractAnnotationAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: element:null => false
references:
- uid: ONITwitchLib.Utils
  commentId: N:ONITwitchLib.Utils
  href: ONITwitchLib.html
  name: ONITwitchLib.Utils
  nameWithType: ONITwitchLib.Utils
  fullName: ONITwitchLib.Utils
  spec.csharp:
  - uid: ONITwitchLib
    name: ONITwitchLib
    href: ONITwitchLib.html
  - name: .
  - uid: ONITwitchLib.Utils
    name: Utils
    href: ONITwitchLib.Utils.html
  spec.vb:
  - uid: ONITwitchLib
    name: ONITwitchLib
    href: ONITwitchLib.html
  - name: .
  - uid: ONITwitchLib.Utils
    name: Utils
    href: ONITwitchLib.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Element
  commentId: T:Element
  isExternal: true
  name: Element
  nameWithType: Element
  fullName: Element
- uid: ONITwitchLib.Utils.ElementUtil.FindElementByNameFast*
  commentId: Overload:ONITwitchLib.Utils.ElementUtil.FindElementByNameFast
  href: ONITwitchLib.Utils.ElementUtil.html#ONITwitchLib.Utils.ElementUtil.FindElementByNameFast(System.String)
  name: FindElementByNameFast
  nameWithType: ElementUtil.FindElementByNameFast
  fullName: ONITwitchLib.Utils.ElementUtil.FindElementByNameFast
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled*
  commentId: Overload:ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled
  href: ONITwitchLib.Utils.ElementUtil.html#ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled(System.String)
  name: ElementExistsAndEnabled
  nameWithType: ElementUtil.ElementExistsAndEnabled
  fullName: ONITwitchLib.Utils.ElementUtil.ElementExistsAndEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: SimHashes
  commentId: T:SimHashes
  isExternal: true
  name: SimHashes
  nameWithType: SimHashes
  fullName: SimHashes
