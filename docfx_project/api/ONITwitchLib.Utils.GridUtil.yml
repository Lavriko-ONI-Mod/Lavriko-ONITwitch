### YamlMime:ManagedReference
items:
- uid: ONITwitchLib.Utils.GridUtil
  commentId: T:ONITwitchLib.Utils.GridUtil
  id: GridUtil
  parent: ONITwitchLib.Utils
  children:
  - ONITwitchLib.Utils.GridUtil.ActiveSimCells
  - ONITwitchLib.Utils.GridUtil.CellNeighbors
  - ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding(System.Int32,BuildingDef,Orientation)
  - ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance(System.Int32)
  - ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance(System.Int32)
  - ONITwitchLib.Utils.GridUtil.FloodCollectCells(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Collections.Generic.HashSet{System.Int32})
  - ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds(System.Int32)
  - ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance(System.Int32)
  - ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  - ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  - ONITwitchLib.Utils.GridUtil.IterateCellRegion(Game.SimActiveRegion)
  - ONITwitchLib.Utils.GridUtil.IterateCellRegion(Vector2I,Vector2I)
  - ONITwitchLib.Utils.GridUtil.NearestEmptyCell(System.Int32)
  langs:
  - csharp
  - vb
  name: GridUtil
  nameWithType: GridUtil
  fullName: ONITwitchLib.Utils.GridUtil
  type: Class
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: GridUtil
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 12
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Provides utilities for searching the <xref href="Grid" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static class GridUtil
    content.vb: >-
      <PublicAPI>

      Public Module GridUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.GridUtil.CellNeighbors
  commentId: F:ONITwitchLib.Utils.GridUtil.CellNeighbors
  id: CellNeighbors
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: CellNeighbors
  nameWithType: GridUtil.CellNeighbors
  fullName: ONITwitchLib.Utils.GridUtil.CellNeighbors
  type: Field
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: CellNeighbors
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 18
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: The directions that are neighbors to any cell.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static readonly List<Direction> CellNeighbors
    return:
      type: System.Collections.Generic.List{Direction}
    content.vb: >-
      <PublicAPI>

      Public Shared ReadOnly CellNeighbors As List(Of Direction)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds(System.Int32)
  id: GetNeighborsInBounds(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: GetNeighborsInBounds(int)
  nameWithType: GridUtil.GetNeighborsInBounds(int)
  fullName: ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: GetNeighborsInBounds
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 34
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Gets all neighbors of a cell that are valid and in the same world.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [NotNull]

      public static IEnumerable<int> GetNeighborsInBounds(int cell)
    parameters:
    - id: cell
      type: System.Int32
      description: The base cell.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An enumerable of all cells that are in bounds neighbors of <code class="paramref">cell</code>.
    content.vb: >-
      <PublicAPI>

      <NotNull>

      Public Shared Function GetNeighborsInBounds(cell As Integer) As IEnumerable(Of Integer)
  overload: ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds*
  seealso:
  - linkId: ONITwitchLib.Utils.GridUtil.CellNeighbors
    commentId: F:ONITwitchLib.Utils.GridUtil.CellNeighbors
  - linkId: Grid.IsValidCell(System.Int32)
    commentId: M:Grid.IsValidCell(System.Int32)
  - linkId: Grid.AreCellsInSameWorld(System.Int32,System.Int32)
    commentId: M:Grid.AreCellsInSameWorld(System.Int32,System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.NotNullAttribute
    ctor: JetBrains.Annotations.NotNullAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.GetNeighborsInBounds(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds(Integer)
  name.vb: GetNeighborsInBounds(Integer)
- uid: ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance(System.Int32)
  id: GetNeighborsWithFoundationClearance(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: GetNeighborsWithFoundationClearance(int)
  nameWithType: GridUtil.GetNeighborsWithFoundationClearance(int)
  fullName: ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: GetNeighborsWithFoundationClearance
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 49
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Gets the neighbors of a cell that do not have foundation.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [NotNull]

      public static IEnumerable<int> GetNeighborsWithFoundationClearance(int cell)
    parameters:
    - id: cell
      type: System.Int32
      description: The base cell.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An enumerable of cells that are neighbors of <code class="paramref">cell</code> and that are clear for foundation.
    content.vb: >-
      <PublicAPI>

      <NotNull>

      Public Shared Function GetNeighborsWithFoundationClearance(cell As Integer) As IEnumerable(Of Integer)
  overload: ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance*
  seealso:
  - linkId: ONITwitchLib.Utils.GridUtil.CellNeighbors
    commentId: F:ONITwitchLib.Utils.GridUtil.CellNeighbors
  - linkId: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
    commentId: M:ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.NotNullAttribute
    ctor: JetBrains.Annotations.NotNullAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.GetNeighborsWithFoundationClearance(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance(Integer)
  name.vb: GetNeighborsWithFoundationClearance(Integer)
- uid: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  id: IsCellEmpty(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: IsCellEmpty(int)
  nameWithType: GridUtil.IsCellEmpty(int)
  fullName: ONITwitchLib.Utils.GridUtil.IsCellEmpty(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: IsCellEmpty
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 68
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Gets whether a cell is empty of solids and foundation.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static bool IsCellEmpty(int cell)
    parameters:
    - id: cell
      type: System.Int32
      description: The cell to check.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">cell</code> is not a foundation, is a valid cell for building,

        and is not solid, otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: >-
      <PublicAPI>

      Public Shared Function IsCellEmpty(cell As Integer) As Boolean
  overload: ONITwitchLib.Utils.GridUtil.IsCellEmpty*
  seealso:
  - linkId: Grid.Foundation
    commentId: F:Grid.Foundation
  - linkId: Grid.IsValidBuildingCell(System.Int32)
    commentId: M:Grid.IsValidBuildingCell(System.Int32)
  - linkId: Grid.IsSolidCell(System.Int32)
    commentId: M:Grid.IsSolidCell(System.Int32)
  - linkId: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
    commentId: M:ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.IsCellEmpty(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.IsCellEmpty(Integer)
  name.vb: IsCellEmpty(Integer)
- uid: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  id: IsCellFoundationEmpty(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: IsCellFoundationEmpty(int)
  nameWithType: GridUtil.IsCellFoundationEmpty(int)
  fullName: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: IsCellFoundationEmpty
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 89
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Gets whether a cell is empty for the purposes of foundation and if it is not maximum hardness.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static bool IsCellFoundationEmpty(int cell)
    parameters:
    - id: cell
      type: System.Int32
      description: The cell to check.
    return:
      type: System.Boolean
      description: >-
        <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">cell</code> is not a foundation, is a valid cell for building,

        and is diggable, otherwise <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: >-
      <PublicAPI>

      Public Shared Function IsCellFoundationEmpty(cell As Integer) As Boolean
  overload: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty*
  seealso:
  - linkId: Grid.Foundation
    commentId: F:Grid.Foundation
  - linkId: Grid.IsValidBuildingCell(System.Int32)
    commentId: M:Grid.IsValidBuildingCell(System.Int32)
  - linkId: Grid.Element
    commentId: F:Grid.Element
  - linkId: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
    commentId: M:ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.IsCellFoundationEmpty(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(Integer)
  name.vb: IsCellFoundationEmpty(Integer)
- uid: ONITwitchLib.Utils.GridUtil.NearestEmptyCell(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.NearestEmptyCell(System.Int32)
  id: NearestEmptyCell(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: NearestEmptyCell(int)
  nameWithType: GridUtil.NearestEmptyCell(int)
  fullName: ONITwitchLib.Utils.GridUtil.NearestEmptyCell(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: NearestEmptyCell
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 112
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Finds the nearest empty cell within 40 cells of <code class="paramref">baseCell</code>.
  remarks: >-
    This search is based on <code>GameUtil.FloodFillFind</code>, which does a breadth first search,

    moving out approximately equally in all directions
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static int NearestEmptyCell(int baseCell)
    parameters:
    - id: baseCell
      type: System.Int32
      description: The cell to begin searching from.
    return:
      type: System.Int32
      description: >-
        The nearest cell that is not solid, within the same world as <code class="paramref">baseCell</code>,

        or <xref href="Grid.InvalidCell" data-throw-if-not-resolved="false"></xref> (-1) if one cannot be found in range.
    content.vb: >-
      <PublicAPI>

      Public Shared Function NearestEmptyCell(baseCell As Integer) As Integer
  overload: ONITwitchLib.Utils.GridUtil.NearestEmptyCell*
  seealso:
  - linkId: GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
    commentId: M:GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
  - linkId: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
    commentId: M:ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.NearestEmptyCell(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.NearestEmptyCell(Integer)
  name.vb: NearestEmptyCell(Integer)
- uid: ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance(System.Int32)
  id: FindCellWithCavityClearance(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: FindCellWithCavityClearance(int)
  nameWithType: GridUtil.FindCellWithCavityClearance(int)
  fullName: ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: FindCellWithCavityClearance
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 147
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: >-
    Finds the nearest empty cell within 40 cells of <code class="paramref">baseCell</code>

    that also has all neighbors empty.
  remarks: >-
    This search is based on <code>GameUtil.FloodFillFind</code>, which does a breadth first search,

    moving out approximately equally in all directions
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static int FindCellWithCavityClearance(int baseCell)
    parameters:
    - id: baseCell
      type: System.Int32
      description: The cell to begin searching from.
    return:
      type: System.Int32
      description: >-
        The nearest cell within the same world as <code class="paramref">baseCell</code> that is not solid and has all neighbors

        empty, or <xref href="Grid.InvalidCell" data-throw-if-not-resolved="false"></xref> (-1) if one cannot be found in range.
    content.vb: >-
      <PublicAPI>

      Public Shared Function FindCellWithCavityClearance(baseCell As Integer) As Integer
  overload: ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance*
  seealso:
  - linkId: GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
    commentId: M:GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
  - linkId: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
    commentId: M:ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.FindCellWithCavityClearance(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance(Integer)
  name.vb: FindCellWithCavityClearance(Integer)
- uid: ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance(System.Int32)
  id: FindCellWithFoundationClearance(System.Int32)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: FindCellWithFoundationClearance(int)
  nameWithType: GridUtil.FindCellWithFoundationClearance(int)
  fullName: ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance(int)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: FindCellWithFoundationClearance
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 187
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: >-
    Finds the nearest cell that does not have a foundation within 40 cells

    of <code class="paramref">baseCell</code> where its neighbors also all have no foundation.
  remarks: >-
    This search is based on <code>GameUtil.FloodFillFind</code>, which does a breadth first search,

    moving out approximately equally in all directions
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static int FindCellWithFoundationClearance(int baseCell)
    parameters:
    - id: baseCell
      type: System.Int32
      description: The cell to begin searching from.
    return:
      type: System.Int32
      description: >-
        The nearest cell within the same world as <code class="paramref">baseCell</code> that is not foundation and where all

        neighbors do not have foundation, or <xref href="Grid.InvalidCell" data-throw-if-not-resolved="false"></xref> (-1) if one cannot be found in range.
    content.vb: >-
      <PublicAPI>

      Public Shared Function FindCellWithFoundationClearance(baseCell As Integer) As Integer
  overload: ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance*
  seealso:
  - linkId: GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
    commentId: M:GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
  - linkId: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
    commentId: M:ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.FindCellWithFoundationClearance(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance(Integer)
  name.vb: FindCellWithFoundationClearance(Integer)
- uid: ONITwitchLib.Utils.GridUtil.FloodCollectCells(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Collections.Generic.HashSet{System.Int32})
  commentId: M:ONITwitchLib.Utils.GridUtil.FloodCollectCells(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Collections.Generic.HashSet{System.Int32})
  id: FloodCollectCells(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Collections.Generic.HashSet{System.Int32})
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: FloodCollectCells(int, Func<int, bool>, int, HashSet<int>)
  nameWithType: GridUtil.FloodCollectCells(int, Func<int, bool>, int, HashSet<int>)
  fullName: ONITwitchLib.Utils.GridUtil.FloodCollectCells(int, System.Func<int, bool>, int, System.Collections.Generic.HashSet<int>)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: FloodCollectCells
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 221
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: >-
    Collects cells by flood fill but does not favor one direction first.

    Does not clear the set of found cells if too many cells match, it just stops early.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [NotNull]

      public static HashSet<int> FloodCollectCells(int startCell, Func<int, bool> cellValid, int maxSize = 1000, HashSet<int> invalidVisitedCells = null)
    parameters:
    - id: startCell
      type: System.Int32
      description: The initial cell to start searching from.
    - id: cellValid
      type: System.Func{System.Int32,System.Boolean}
      description: The function called to determine whether a visited cell is valid.
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    - id: maxSize
      type: System.Int32
      description: The maximum number of cells to collect.
    - id: invalidVisitedCells
      type: System.Collections.Generic.HashSet{System.Int32}
      description: All of the cells that were visited that were not considered valid.
      attributes:
      - type: JetBrains.Annotations.CanBeNullAttribute
        ctor: JetBrains.Annotations.CanBeNullAttribute.#ctor
        arguments: []
    return:
      type: System.Collections.Generic.HashSet{System.Int32}
      description: A HashSet containing the cells that were valid.
    content.vb: >-
      <PublicAPI>

      <NotNull>

      Public Shared Function FloodCollectCells(startCell As Integer, cellValid As Func(Of Integer, Boolean), maxSize As Integer = 1000, invalidVisitedCells As HashSet(Of Integer) = Nothing) As HashSet(Of Integer)
  overload: ONITwitchLib.Utils.GridUtil.FloodCollectCells*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.NotNullAttribute
    ctor: JetBrains.Annotations.NotNullAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.FloodCollectCells(Integer, Func(Of Integer, Boolean), Integer, HashSet(Of Integer))
  fullName.vb: ONITwitchLib.Utils.GridUtil.FloodCollectCells(Integer, System.Func(Of Integer, Boolean), Integer, System.Collections.Generic.HashSet(Of Integer))
  name.vb: FloodCollectCells(Integer, Func(Of Integer, Boolean), Integer, HashSet(Of Integer))
- uid: ONITwitchLib.Utils.GridUtil.IterateCellRegion(Game.SimActiveRegion)
  commentId: M:ONITwitchLib.Utils.GridUtil.IterateCellRegion(Game.SimActiveRegion)
  id: IterateCellRegion(Game.SimActiveRegion)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: IterateCellRegion(SimActiveRegion)
  nameWithType: GridUtil.IterateCellRegion(Game.SimActiveRegion)
  fullName: ONITwitchLib.Utils.GridUtil.IterateCellRegion(Game.SimActiveRegion)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: IterateCellRegion
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 269
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Iterates over a region of cells defined by a <xref href="Game.SimActiveRegion" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [NotNull]

      public static IEnumerable<int> IterateCellRegion(Game.SimActiveRegion region)
    parameters:
    - id: region
      type: Game.SimActiveRegion
      description: The region of cells to iterate.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An enumerable containing every cell within the region.
    content.vb: >-
      <PublicAPI>

      <NotNull>

      Public Shared Function IterateCellRegion(region As Game.SimActiveRegion) As IEnumerable(Of Integer)
  overload: ONITwitchLib.Utils.GridUtil.IterateCellRegion*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.NotNullAttribute
    ctor: JetBrains.Annotations.NotNullAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.GridUtil.IterateCellRegion(Vector2I,Vector2I)
  commentId: M:ONITwitchLib.Utils.GridUtil.IterateCellRegion(Vector2I,Vector2I)
  id: IterateCellRegion(Vector2I,Vector2I)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: IterateCellRegion(Vector2I, Vector2I)
  nameWithType: GridUtil.IterateCellRegion(Vector2I, Vector2I)
  fullName: ONITwitchLib.Utils.GridUtil.IterateCellRegion(Vector2I, Vector2I)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: IterateCellRegion
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 282
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Iterates over a region of cells defined by a minimum and a maximum.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [NotNull]

      public static IEnumerable<int> IterateCellRegion(Vector2I min, Vector2I max)
    parameters:
    - id: min
      type: Vector2I
      description: The minimum bounds of the region.
    - id: max
      type: Vector2I
      description: The maximum bounds of the region.
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An enumerable containing every cell within the region.
    content.vb: >-
      <PublicAPI>

      <NotNull>

      Public Shared Function IterateCellRegion(min As Vector2I, max As Vector2I) As IEnumerable(Of Integer)
  overload: ONITwitchLib.Utils.GridUtil.IterateCellRegion*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.NotNullAttribute
    ctor: JetBrains.Annotations.NotNullAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.GridUtil.ActiveSimCells
  commentId: M:ONITwitchLib.Utils.GridUtil.ActiveSimCells
  id: ActiveSimCells
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: ActiveSimCells()
  nameWithType: GridUtil.ActiveSimCells()
  fullName: ONITwitchLib.Utils.GridUtil.ActiveSimCells()
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: ActiveSimCells
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 300
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: Iterates over all cells that the game considers currently active.
  remarks: As of Mergedown, the game activates whole planets at a time, based on whether they are discovered.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      [NotNull]

      public static IEnumerable<int> ActiveSimCells()
    return:
      type: System.Collections.Generic.IEnumerable{System.Int32}
      description: An enumerable containing all active cells.
    content.vb: >-
      <PublicAPI>

      <NotNull>

      Public Shared Function ActiveSimCells() As IEnumerable(Of Integer)
  overload: ONITwitchLib.Utils.GridUtil.ActiveSimCells*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  - type: JetBrains.Annotations.NotNullAttribute
    ctor: JetBrains.Annotations.NotNullAttribute.#ctor
    arguments: []
- uid: ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding(System.Int32,BuildingDef,Orientation)
  commentId: M:ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding(System.Int32,BuildingDef,Orientation)
  id: FindCellOpenToBuilding(System.Int32,BuildingDef,Orientation)
  parent: ONITwitchLib.Utils.GridUtil
  langs:
  - csharp
  - vb
  name: FindCellOpenToBuilding(int, BuildingDef, Orientation)
  nameWithType: GridUtil.FindCellOpenToBuilding(int, BuildingDef, Orientation)
  fullName: ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding(int, BuildingDef, Orientation)
  type: Method
  source:
    remote:
      path: ONITwitchLib/Utils/GridUtil.cs
      branch: 1.2.0-beta
      repo: git@github.com:asquared31415/ONITwitch.git
    id: FindCellOpenToBuilding
    path: ../ONITwitchLib/Utils/GridUtil.cs
    startLine: 319
  assemblies:
  - ONITwitchLib
  namespace: ONITwitchLib.Utils
  summary: >-
    Finds the nearest cell that can have the passed <xref href="BuildingDef" data-throw-if-not-resolved="false"></xref> built,

    or <xref href="Grid.InvalidCell" data-throw-if-not-resolved="false"></xref> (-1) if a cell cannot be found.
  example: []
  syntax:
    content: >-
      [PublicAPI]

      public static int FindCellOpenToBuilding(int cell, BuildingDef building, Orientation orientation = Orientation.Neutral)
    parameters:
    - id: cell
      type: System.Int32
      description: The cell to begin searching.
    - id: building
      type: BuildingDef
      description: The building to check placement for.
      attributes:
      - type: JetBrains.Annotations.NotNullAttribute
        ctor: JetBrains.Annotations.NotNullAttribute.#ctor
        arguments: []
    - id: orientation
      type: Orientation
      description: The orientation of the building.
    return:
      type: System.Int32
      description: >-
        The nearest cell to <code class="paramref">cell</code> that can support building <code class="paramref">building</code> with

        <code class="paramref">orientation</code> orientation.
    content.vb: >-
      <PublicAPI>

      Public Shared Function FindCellOpenToBuilding(cell As Integer, building As BuildingDef, orientation As Orientation = Orientation.Neutral) As Integer
  overload: ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding*
  attributes:
  - type: JetBrains.Annotations.PublicAPIAttribute
    ctor: JetBrains.Annotations.PublicAPIAttribute.#ctor
    arguments: []
  nameWithType.vb: GridUtil.FindCellOpenToBuilding(Integer, BuildingDef, Orientation)
  fullName.vb: ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding(Integer, BuildingDef, Orientation)
  name.vb: FindCellOpenToBuilding(Integer, BuildingDef, Orientation)
references:
- uid: Grid
  commentId: T:Grid
  isExternal: true
  name: Grid
  nameWithType: Grid
  fullName: Grid
- uid: ONITwitchLib.Utils
  commentId: N:ONITwitchLib.Utils
  href: ONITwitchLib.html
  name: ONITwitchLib.Utils
  nameWithType: ONITwitchLib.Utils
  fullName: ONITwitchLib.Utils
  spec.csharp:
  - uid: ONITwitchLib
    name: ONITwitchLib
    href: ONITwitchLib.html
  - name: .
  - uid: ONITwitchLib.Utils
    name: Utils
    href: ONITwitchLib.Utils.html
  spec.vb:
  - uid: ONITwitchLib
    name: ONITwitchLib
    href: ONITwitchLib.html
  - name: .
  - uid: ONITwitchLib.Utils
    name: Utils
    href: ONITwitchLib.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.List{Direction}
  commentId: T:System.Collections.Generic.List{Direction}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Direction>
  nameWithType: List<Direction>
  fullName: System.Collections.Generic.List<Direction>
  nameWithType.vb: List(Of Direction)
  fullName.vb: System.Collections.Generic.List(Of Direction)
  name.vb: List(Of Direction)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Direction
    name: Direction
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Direction
    name: Direction
    isExternal: true
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: ONITwitchLib.Utils.GridUtil.CellNeighbors
  commentId: F:ONITwitchLib.Utils.GridUtil.CellNeighbors
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.CellNeighbors
  name: CellNeighbors
  nameWithType: GridUtil.CellNeighbors
  fullName: ONITwitchLib.Utils.GridUtil.CellNeighbors
- uid: Grid.IsValidCell(System.Int32)
  commentId: M:Grid.IsValidCell(System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: IsValidCell(int)
  nameWithType: Grid.IsValidCell(int)
  fullName: Grid.IsValidCell(int)
  nameWithType.vb: Grid.IsValidCell(Integer)
  fullName.vb: Grid.IsValidCell(Integer)
  name.vb: IsValidCell(Integer)
  spec.csharp:
  - uid: Grid.IsValidCell(System.Int32)
    name: IsValidCell
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Grid.IsValidCell(System.Int32)
    name: IsValidCell
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Grid.AreCellsInSameWorld(System.Int32,System.Int32)
  commentId: M:Grid.AreCellsInSameWorld(System.Int32,System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: AreCellsInSameWorld(int, int)
  nameWithType: Grid.AreCellsInSameWorld(int, int)
  fullName: Grid.AreCellsInSameWorld(int, int)
  nameWithType.vb: Grid.AreCellsInSameWorld(Integer, Integer)
  fullName.vb: Grid.AreCellsInSameWorld(Integer, Integer)
  name.vb: AreCellsInSameWorld(Integer, Integer)
  spec.csharp:
  - uid: Grid.AreCellsInSameWorld(System.Int32,System.Int32)
    name: AreCellsInSameWorld
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Grid.AreCellsInSameWorld(System.Int32,System.Int32)
    name: AreCellsInSameWorld
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds(System.Int32)
  name: GetNeighborsInBounds
  nameWithType: GridUtil.GetNeighborsInBounds
  fullName: ONITwitchLib.Utils.GridUtil.GetNeighborsInBounds
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.IEnumerable{System.Int32}
  commentId: T:System.Collections.Generic.IEnumerable{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<int>
  nameWithType: IEnumerable<int>
  fullName: System.Collections.Generic.IEnumerable<int>
  nameWithType.vb: IEnumerable(Of Integer)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Integer)
  name.vb: IEnumerable(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  isExternal: true
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  name: IsCellFoundationEmpty(int)
  nameWithType: GridUtil.IsCellFoundationEmpty(int)
  fullName: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(int)
  nameWithType.vb: GridUtil.IsCellFoundationEmpty(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(Integer)
  name.vb: IsCellFoundationEmpty(Integer)
  spec.csharp:
  - uid: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
    name: IsCellFoundationEmpty
    href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
    name: IsCellFoundationEmpty
    href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance(System.Int32)
  name: GetNeighborsWithFoundationClearance
  nameWithType: GridUtil.GetNeighborsWithFoundationClearance
  fullName: ONITwitchLib.Utils.GridUtil.GetNeighborsWithFoundationClearance
- uid: Grid.Foundation
  commentId: F:Grid.Foundation
  isExternal: true
  name: Foundation
  nameWithType: Grid.Foundation
  fullName: Grid.Foundation
- uid: Grid.IsValidBuildingCell(System.Int32)
  commentId: M:Grid.IsValidBuildingCell(System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: IsValidBuildingCell(int)
  nameWithType: Grid.IsValidBuildingCell(int)
  fullName: Grid.IsValidBuildingCell(int)
  nameWithType.vb: Grid.IsValidBuildingCell(Integer)
  fullName.vb: Grid.IsValidBuildingCell(Integer)
  name.vb: IsValidBuildingCell(Integer)
  spec.csharp:
  - uid: Grid.IsValidBuildingCell(System.Int32)
    name: IsValidBuildingCell
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Grid.IsValidBuildingCell(System.Int32)
    name: IsValidBuildingCell
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Grid.IsSolidCell(System.Int32)
  commentId: M:Grid.IsSolidCell(System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: IsSolidCell(int)
  nameWithType: Grid.IsSolidCell(int)
  fullName: Grid.IsSolidCell(int)
  nameWithType.vb: Grid.IsSolidCell(Integer)
  fullName.vb: Grid.IsSolidCell(Integer)
  name.vb: IsSolidCell(Integer)
  spec.csharp:
  - uid: Grid.IsSolidCell(System.Int32)
    name: IsSolidCell
    isExternal: true
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: Grid.IsSolidCell(System.Int32)
    name: IsSolidCell
    isExternal: true
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: ONITwitchLib.Utils.GridUtil.IsCellEmpty*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.IsCellEmpty
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  name: IsCellEmpty
  nameWithType: GridUtil.IsCellEmpty
  fullName: ONITwitchLib.Utils.GridUtil.IsCellEmpty
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Grid.Element
  commentId: F:Grid.Element
  isExternal: true
  name: Element
  nameWithType: Grid.Element
  fullName: Grid.Element
- uid: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  commentId: M:ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  isExternal: true
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  name: IsCellEmpty(int)
  nameWithType: GridUtil.IsCellEmpty(int)
  fullName: ONITwitchLib.Utils.GridUtil.IsCellEmpty(int)
  nameWithType.vb: GridUtil.IsCellEmpty(Integer)
  fullName.vb: ONITwitchLib.Utils.GridUtil.IsCellEmpty(Integer)
  name.vb: IsCellEmpty(Integer)
  spec.csharp:
  - uid: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
    name: IsCellEmpty
    href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  - name: (
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
    name: IsCellEmpty
    href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellEmpty(System.Int32)
  - name: (
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty(System.Int32)
  name: IsCellFoundationEmpty
  nameWithType: GridUtil.IsCellFoundationEmpty
  fullName: ONITwitchLib.Utils.GridUtil.IsCellFoundationEmpty
- uid: GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
  commentId: M:GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-3
  name: FloodFillFind<ArgType>(Func<int, ArgType, bool>, ArgType, int, int, bool, bool)
  nameWithType: GameUtil.FloodFillFind<ArgType>(Func<int, ArgType, bool>, ArgType, int, int, bool, bool)
  fullName: GameUtil.FloodFillFind<ArgType>(System.Func<int, ArgType, bool>, ArgType, int, int, bool, bool)
  nameWithType.vb: GameUtil.FloodFillFind(Of ArgType)(Func(Of Integer, ArgType, Boolean), ArgType, Integer, Integer, Boolean, Boolean)
  fullName.vb: GameUtil.FloodFillFind(Of ArgType)(System.Func(Of Integer, ArgType, Boolean), ArgType, Integer, Integer, Boolean, Boolean)
  name.vb: FloodFillFind(Of ArgType)(Func(Of Integer, ArgType, Boolean), ArgType, Integer, Integer, Boolean, Boolean)
  spec.csharp:
  - uid: GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
    name: FloodFillFind
    isExternal: true
  - name: <
  - name: ArgType
  - name: '>'
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ArgType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  - name: ','
  - name: " "
  - name: ArgType
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: GameUtil.FloodFillFind``1(System.Func{System.Int32,``0,System.Boolean},``0,System.Int32,System.Int32,System.Boolean,System.Boolean)
    name: FloodFillFind
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: ArgType
  - name: )
  - name: (
  - uid: System.Func`3
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-3
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - name: ArgType
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  - name: ','
  - name: " "
  - name: ArgType
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Grid.InvalidCell
  commentId: F:Grid.InvalidCell
  isExternal: true
  name: InvalidCell
  nameWithType: Grid.InvalidCell
  fullName: Grid.InvalidCell
- uid: ONITwitchLib.Utils.GridUtil.NearestEmptyCell*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.NearestEmptyCell
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.NearestEmptyCell(System.Int32)
  name: NearestEmptyCell
  nameWithType: GridUtil.NearestEmptyCell
  fullName: ONITwitchLib.Utils.GridUtil.NearestEmptyCell
- uid: ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance(System.Int32)
  name: FindCellWithCavityClearance
  nameWithType: GridUtil.FindCellWithCavityClearance
  fullName: ONITwitchLib.Utils.GridUtil.FindCellWithCavityClearance
- uid: ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance(System.Int32)
  name: FindCellWithFoundationClearance
  nameWithType: GridUtil.FindCellWithFoundationClearance
  fullName: ONITwitchLib.Utils.GridUtil.FindCellWithFoundationClearance
- uid: ONITwitchLib.Utils.GridUtil.FloodCollectCells*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.FloodCollectCells
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.FloodCollectCells(System.Int32,System.Func{System.Int32,System.Boolean},System.Int32,System.Collections.Generic.HashSet{System.Int32})
  name: FloodCollectCells
  nameWithType: GridUtil.FloodCollectCells
  fullName: ONITwitchLib.Utils.GridUtil.FloodCollectCells
- uid: System.Func{System.Int32,System.Boolean}
  commentId: T:System.Func{System.Int32,System.Boolean}
  parent: System
  definition: System.Func`2
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<int, bool>
  nameWithType: Func<int, bool>
  fullName: System.Func<int, bool>
  nameWithType.vb: Func(Of Integer, Boolean)
  fullName.vb: System.Func(Of Integer, Boolean)
  name.vb: Func(Of Integer, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: System.Collections.Generic.HashSet{System.Int32}
  commentId: T:System.Collections.Generic.HashSet{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.HashSet`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<int>
  nameWithType: HashSet<int>
  fullName: System.Collections.Generic.HashSet<int>
  nameWithType.vb: HashSet(Of Integer)
  fullName.vb: System.Collections.Generic.HashSet(Of Integer)
  name.vb: HashSet(Of Integer)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.func-2
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullName.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: <
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.func-2
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: ','
  - name: " "
  - name: TResult
  - name: )
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  name: HashSet<T>
  nameWithType: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  nameWithType.vb: HashSet(Of T)
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1
    name: HashSet
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.hashset-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Game.SimActiveRegion
  commentId: T:Game.SimActiveRegion
  isExternal: true
  name: Game.SimActiveRegion
  nameWithType: Game.SimActiveRegion
  fullName: Game.SimActiveRegion
  spec.csharp:
  - uid: Game
    name: Game
    isExternal: true
  - name: .
  - uid: Game.SimActiveRegion
    name: SimActiveRegion
    isExternal: true
  spec.vb:
  - uid: Game
    name: Game
    isExternal: true
  - name: .
  - uid: Game.SimActiveRegion
    name: SimActiveRegion
    isExternal: true
- uid: ONITwitchLib.Utils.GridUtil.IterateCellRegion*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.IterateCellRegion
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.IterateCellRegion(Game.SimActiveRegion)
  name: IterateCellRegion
  nameWithType: GridUtil.IterateCellRegion
  fullName: ONITwitchLib.Utils.GridUtil.IterateCellRegion
- uid: Vector2I
  commentId: T:Vector2I
  isExternal: true
  name: Vector2I
  nameWithType: Vector2I
  fullName: Vector2I
- uid: ONITwitchLib.Utils.GridUtil.ActiveSimCells*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.ActiveSimCells
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.ActiveSimCells
  name: ActiveSimCells
  nameWithType: GridUtil.ActiveSimCells
  fullName: ONITwitchLib.Utils.GridUtil.ActiveSimCells
- uid: BuildingDef
  commentId: T:BuildingDef
  isExternal: true
  name: BuildingDef
  nameWithType: BuildingDef
  fullName: BuildingDef
- uid: ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding*
  commentId: Overload:ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding
  href: ONITwitchLib.Utils.GridUtil.html#ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding(System.Int32,BuildingDef,Orientation)
  name: FindCellOpenToBuilding
  nameWithType: GridUtil.FindCellOpenToBuilding
  fullName: ONITwitchLib.Utils.GridUtil.FindCellOpenToBuilding
- uid: Orientation
  commentId: T:Orientation
  isExternal: true
  name: Orientation
  nameWithType: Orientation
  fullName: Orientation
